plugins {
    id 'java'
}

group 'show.lmm'
version '1.0'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.6.3'
    implementation 'org.projectlombok:lombok:1.18.20'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.6.3'
    // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
    implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
    // https://mvnrepository.com/artifact/com.alibaba/druid
    implementation group: 'com.alibaba', name: 'druid', version: '1.2.8'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
}

test {
    useJUnitPlatform()
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    [compileJava]*.options*.encoding = 'UTF-8'
}
compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    [compileTestJava]*.options*.encoding = 'UTF-8'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}
// 生成 javadoc jar
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}
// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    options.addStringOption('Xdoclint:none', '-quiet')

    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    options.encoding = "UTF-8"
    options.charSet = 'UTF-8'
}
artifacts {
    archives javadocJar, sourcesJar
}
publishing {
    // 定义发布什么
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                // 构件名称
                // 区别于artifactId，可以理解为artifactName
                name = '基于spring boot+mybatis的多租户插件'
                // 构件描述
                description = '基于spring boot+mybatis的多租户插件'
                // 构件主页
                url = 'https://github.com/lmm1990/tenant-spring-boot-starter'
                // 许可证名称和地址
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/lmm1990/tenant-spring-boot-starter/blob/main/LICENSE'
                    }
                }
                // 开发者信息
                developers {
                    developer {
                        name = 'liumingming'
                        email = '544484078@qq.com'
                    }
                }
                // 版本控制仓库地址
                scm {
                    url = 'https://github.com/lmm1990/tenant-spring-boot-starter'
                    connection = 'scm:git:git://github.com/lmm1990/tenant-spring-boot-starter.git'
                    developerConnection = 'scm:git:ssh://git@github.com:lmm1990/tenant-spring-boot-starter.git'
                }
            }
        }
    }
    // 定义发布到哪里
    repositories {
        maven {
            name 'sonatypeRepository'
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = "${sonatypeUsername}"
                password = "${sonatypePassword}"
            }
        }
        maven {
            name = 'sonatypeSnapshotRepository'
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = "${sonatypeUsername}"
                password = "${sonatypePassword}"
            }
        }
    }
}
signing {
    sign publishing.publications.mavenJava
}